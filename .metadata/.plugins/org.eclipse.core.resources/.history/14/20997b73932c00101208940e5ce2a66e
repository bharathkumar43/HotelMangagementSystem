package com.excelr.controller;

import com.excelr.model.Room;
import com.excelr.model.User;
import com.excelr.repo.UserRepo;
import com.excelr.service.UserService;
import com.excelr.util.JwtUtil;

import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.*;

@RestController
@CrossOrigin(origins = "http://localhost:5173")
@RequestMapping
public class UserController {

    @Autowired
    private UserRepo userRepo;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private UserService userService;

    private BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    // Register Endpoint
    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody User user) {
        Optional<User> existingUser = userRepo.findByUsername(user.getUsername());

        if (existingUser.isPresent()) {
            Map<String, String> response = new HashMap<>();
            response.put("message", "Username already exists");
            return ResponseEntity.status(409).body(response); // 409 Conflict
        }

        user.setPassword(passwordEncoder.encode(user.getPassword()));
        userRepo.save(user);

        Map<String, String> response = new HashMap<>();
        response.put("message", "Registration successful");
        return ResponseEntity.ok(response);
    }

    // Login Endpoint
    @PostMapping("/login")
    public ResponseEntity<Map<String, String>> login(@RequestBody Map<String, String> loginData) {
        String username = loginData.get("username");
        String password = loginData.get("password");

        Optional<User> user = userRepo.findByUsername(username);

        if (user.isPresent() && passwordEncoder.matches(password, user.get().getPassword())) {
            Map<String, String> response = new HashMap<>();
            String token = jwtUtil.generateToken(username);

            response.put("login", "success");
            response.put("token", token);
            response.put("role", user.get().getRole());
            response.put("username", user.get().getUsername());
            response.put("id", String.valueOf(user.get().getId()));

            return ResponseEntity.ok(response);
        } else {
            Map<String, String> response1 = new HashMap<>();
            response1.put("login", "fail");
            return ResponseEntity.status(401).body(response1);
        }
    }

    // Room Endpoints

    @PostMapping("/rooms")
    public ResponseEntity<?> createRoom(@RequestBody Room room) {
        return userService.createRoom(room);
    }

    @GetMapping("/rooms")
    public List<Room> getAllRooms() {
        return userService.getAllRooms();
    }

    @GetMapping("/rooms/{id}")
    public ResponseEntity<?> getRoomById(@PathVariable Long id) {
        return userService.getRoomById(id);
    }

    @PutMapping("/rooms/{id}")
    public ResponseEntity<?> updateRoom(@PathVariable Long id, @RequestBody Room room) {
        return userService.updateRoom(id, room);
    }

    @DeleteMapping("/rooms/{id}")
    public ResponseEntity<?> deleteRoom(@PathVariable Long id) {
        return userService.deleteRoom(id);
    }
}
